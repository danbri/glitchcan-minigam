name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Print diagnostics
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Content of index.html:"
          cat index.html
      
      - name: Update HTML with version info directly
        run: |
          # Get repo info
          REPO_URL="https://github.com/danbri/glitchcan-minigam"
          LAST_COMMIT_DATE=$(git log -1 --format="%ci")
          LAST_COMMIT_ID=$(git rev-parse --short HEAD)
          LAST_COMMIT_URL="$REPO_URL/commit/$LAST_COMMIT_ID"
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Automatically detect all game directories and metadata IDs
          echo "Detecting game directories and metadata..."
          
          # First, discover all game directories - assuming each dir with HTML files is a game
          GAME_DIRS=$(find . -maxdepth 1 -type d -not -path "./.*" -not -path "." | sort)
          
          # Remember all meta IDs found in the HTML
          META_IDS=$(grep -o 'id="[^"]*-meta"' index.html | sed 's/id="//g' | sed 's/-meta"//g')
          echo "Found metadata IDs: $META_IDS"
          
          # Create a temporary directory for metadata HTML files
          mkdir -p metadata_tmp
          
          # Process each game directory
          for META_ID in $META_IDS; do
            echo "Processing metadata for: $META_ID"
            
            # Find the corresponding HTML file(s)
            if [ -d "$META_ID" ]; then
              # Look for a matching HTML file
              MAIN_HTML="$META_ID/$META_ID.html"
              if [ ! -f "$MAIN_HTML" ]; then
                # Find any HTML file in this directory
                MAIN_HTML=$(find "$META_ID" -name "*.html" -maxdepth 1 | head -1)
              fi
              
              if [ -f "$MAIN_HTML" ]; then
                # Get commit info for this file
                LAST_COMMIT_DATE=$(git log -1 --format="%ci" -- "$MAIN_HTML")
                LAST_COMMIT_ID=$(git log -1 --format="%h" -- "$MAIN_HTML")
                COMMIT_URL="$REPO_URL/commit/$(git log -1 --format="%H" -- "$MAIN_HTML")"
                
                # Create HTML for this metadata
                META_HTML="<!-- BEGIN: AUTO-GENERATED $(echo $META_ID | tr '[:lower:]' '[:upper:]') METADATA -->
                    <p>
                      Last modified: $LAST_COMMIT_DATE<br>
                      Version: <span class=\"version-badge\">$LAST_COMMIT_ID</span><br>
                      <a href=\"$COMMIT_URL\" target=\"_blank\">View changes</a> | 
                      <a href=\"$REPO_URL/blob/master/$MAIN_HTML\" target=\"_blank\">View source</a> | 
                      <a href=\"$REPO_URL/commits/master/$MAIN_HTML\" target=\"_blank\">History</a>
                    </p>
                    <!-- END: AUTO-GENERATED $(echo $META_ID | tr '[:lower:]' '[:upper:]') METADATA -->"
                
                # Save to a temporary file
                echo "$META_HTML" > "metadata_tmp/${META_ID}_meta.html"
                echo "Created metadata for $META_ID"
              else
                echo "Warning: No HTML files found for $META_ID"
              fi
            else
              echo "Warning: Directory $META_ID not found"
            fi
          done
          
          # Update repository info in HTML
          sed -i "s|<span id=\"last-commit-date\">Loading...</span>|<span id=\"last-commit-date\"><!-- AUTO-GENERATED -->$LAST_COMMIT_DATE<!-- /AUTO-GENERATED --></span>|g" index.html
          sed -i "s|<span id=\"latest-commit-id\">Loading...</span>|<span id=\"latest-commit-id\"><!-- AUTO-GENERATED -->$LAST_COMMIT_ID<!-- /AUTO-GENERATED --></span>|g" index.html
          sed -i "s|<a id=\"latest-commit-link\" href=\"#\" target=\"_blank\">|<a id=\"latest-commit-link\" href=\"$LAST_COMMIT_URL\" target=\"_blank\">|g" index.html
          sed -i "s|<span id=\"latest-commit-message\">Loading...</span>|<span id=\"latest-commit-message\"><!-- AUTO-GENERATED -->$LAST_COMMIT_MSG<!-- /AUTO-GENERATED --></span>|g" index.html
          
          # Debug - view the current content
          echo "Checking current index.html content:"
          grep -A3 "game-meta" index.html
          
          # Create an AWK script that will replace all game-meta divs at once
          cat > update_metadata.awk << 'EOF'
          BEGIN {
            inDiv = 0;
          }
          
          # When we find a meta div, process it
          /<div class="game-meta" id="([^"]+)-meta">/ {
            # Extract the ID from the regex match
            match($0, /<div class="game-meta" id="([^"]+)-meta">/, parts);
            metaId = parts[1];
            
            # Output the opening div tag
            print $0;
            
            # Check if we have metadata for this ID
            metaFile = "metadata_tmp/" metaId "_meta.html";
            cmd = "test -f " metaFile " && echo yes || echo no";
            cmd | getline hasMetadata;
            
            if (hasMetadata == "yes") {
              system("cat " metaFile);
            } else {
              print "            <p>Loading file information...</p>";
            }
            
            inDiv = 1;
            next;
          }
          
          # When we're in a div and find the closing tag
          inDiv && /<\/div>/ {
            print $0;
            inDiv = 0;
            next;
          }
          
          # Skip other content in the div
          inDiv {
            next;
          }
          
          # Print all other lines unchanged
          {
            print $0;
          }
          EOF
          
          # Run the AWK script to replace the metadata
          awk -f update_metadata.awk index.html > index.html.new
          
          mv index.html.new index.html
          
          # Debug - verify the replacement worked
          echo "Checking updated index.html content:"
          grep -A5 "game-meta" index.html

      - name: Remove version-info.js script tag
        run: |
          # Remove script tag since we're no longer using JavaScript for version info
          sed -i '/<script src="version-info.js"><\/script>/d' index.html
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Print final HTML
        run: |
          echo "Final content of index.html:"
          cat index.html
          echo "Directory structure:"
          find . -type f -name "*.html" | sort
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4